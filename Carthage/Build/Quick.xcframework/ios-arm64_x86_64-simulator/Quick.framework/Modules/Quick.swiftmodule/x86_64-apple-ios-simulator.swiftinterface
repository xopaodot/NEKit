// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Quick
import Foundation
@_exported import Quick
import Swift
import XCTest
import _Concurrency

#if compiler(>=5.3) && $AsyncAwait
public typealias BeforeExampleAsyncClosure = () async -> Swift.Void
#endif

public typealias BeforeExampleClosure = @_Concurrency.MainActor () -> Swift.Void

#if compiler(>=5.3) && $AsyncAwait
public typealias BeforeExampleWithMetadataAsyncClosure = (_ exampleMetadata: Quick.ExampleMetadata) async -> Swift.Void
#endif

public typealias BeforeExampleWithMetadataClosure = @_Concurrency.MainActor (_ exampleMetadata: Quick.ExampleMetadata) -> Swift.Void

#if compiler(>=5.3) && $AsyncAwait
public typealias AfterExampleAsyncClosure = Quick.BeforeExampleAsyncClosure
#endif

public typealias AfterExampleClosure = Quick.BeforeExampleClosure

#if compiler(>=5.3) && $AsyncAwait
public typealias AfterExampleWithMetadataAsyncClosure = Quick.BeforeExampleWithMetadataAsyncClosure
#endif

public typealias AfterExampleWithMetadataClosure = Quick.BeforeExampleWithMetadataClosure

#if compiler(>=5.3) && $AsyncAwait
public typealias AroundExampleAsyncClosure = (_ runExample: @escaping () async -> Swift.Void) async -> Swift.Void
#endif


#if compiler(>=5.3) && $AsyncAwait
public typealias AroundExampleWithMetadataAsyncClosure = (_ exampleMetadata: Quick.ExampleMetadata, _ runExample: @escaping () async -> Swift.Void) async -> Swift.Void
#endif


#if compiler(>=5.3) && $AsyncAwait
public typealias BeforeSuiteAsyncClosure = () async -> Swift.Void
#endif

public typealias BeforeSuiteClosure = @_Concurrency.MainActor () -> Swift.Void

#if compiler(>=5.3) && $AsyncAwait
public typealias AfterSuiteAsyncClosure = Quick.BeforeSuiteAsyncClosure
#endif

public typealias AfterSuiteClosure = Quick.BeforeSuiteClosure
public struct StopTest : Swift.Error {
  public let failureDescription: Swift.String
  public let reportError: Swift.Bool
  public let callsite: Quick.Callsite
  public init(_ failureDescription: Swift.String, file: Quick.FileString = #file, line: Swift.UInt = #line)
  public static let silently: Quick.StopTest
}
@objc @_inheritsConvenienceInitializers @objcMembers public class _ExampleMetadataBase : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class ExampleMetadata : Quick._ExampleMetadataBase {
  @objc final public let example: Quick.Example
  @objc final public let exampleIndex: Swift.Int
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class _CallsiteBase : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public typealias FileString = Swift.String
@objc @_hasMissingDesignatedInitializers final public class Callsite : Quick._CallsiteBase {
  @objc final public let file: Quick.FileString
  @objc final public let line: Swift.UInt
  @objc deinit
}
extension Quick.Callsite {
  @nonobjc public static func == (lhs: Quick.Callsite, rhs: Quick.Callsite) -> Swift.Bool
}
@objc @_hasMissingDesignatedInitializers final public class ExampleGroup : ObjectiveC.NSObject {
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc final public var examples: [Quick.Example] {
    @objc get
  }
  @objc deinit
}
public typealias SharedExampleContext = () -> [Swift.String : Any]
public typealias SharedExampleClosure = (@escaping Quick.SharedExampleContext) -> Swift.Void
public typealias QuickConfigurer = (_ configuration: Quick.QCKConfiguration) -> Swift.Void
public typealias ExampleFilter = (_ example: Quick.Example) -> Swift.Bool
@objc @_inheritsConvenienceInitializers final public class QCKConfiguration : ObjectiveC.NSObject {
  final public var runAllWhenEverythingFiltered: Swift.Bool
  final public func include(_ filter: @escaping Quick.ExampleFilter)
  final public func exclude(_ filter: @escaping Quick.ExampleFilter)
  @objc(beforeEachWithMetadata:) final public func objc_beforeEach(_ closure: @escaping Quick.BeforeExampleWithMetadataClosure)
  
  #if compiler(>=5.3) && $AsyncAwait
  @nonobjc final public func beforeEach(_ closure: @escaping Quick.BeforeExampleWithMetadataAsyncClosure)
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func beforeEach(_ closure: @escaping Quick.BeforeExampleAsyncClosure)
  #endif

  @objc(afterEachWithMetadata:) final public func objc_afterEach(_ closure: @escaping Quick.AfterExampleWithMetadataClosure)
  
  #if compiler(>=5.3) && $AsyncAwait
  @nonobjc final public func afterEach(_ closure: @escaping Quick.AfterExampleWithMetadataAsyncClosure)
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func afterEach(_ closure: @escaping Quick.AfterExampleAsyncClosure)
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func aroundEach(_ closure: @escaping Quick.AroundExampleAsyncClosure)
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func aroundEach(_ closure: @escaping Quick.AroundExampleWithMetadataAsyncClosure)
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func beforeSuite(_ closure: @escaping Quick.BeforeSuiteAsyncClosure)
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func afterSuite(_ closure: @escaping Quick.AfterSuiteAsyncClosure)
  #endif

  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers open class Behavior<Context> {
  open class var name: Swift.String {
    get
  }
  open class func spec(_ aContext: @escaping () -> Context)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class QuickTestSuite : XCTest.XCTestSuite {
  @objc public static func selectedTestSuite(forTestCaseWithName name: Swift.String, testName: Swift.String?) -> Quick.QuickTestSuite?
  @objc override dynamic public init(name: Swift.String)
  @objc deinit
}

#if compiler(>=5.3) && $AsyncAwait
public func beforeSuite(_ closure: @escaping Quick.BeforeSuiteAsyncClosure)
#endif


#if compiler(>=5.3) && $AsyncAwait
public func afterSuite(_ closure: @escaping Quick.AfterSuiteAsyncClosure)
#endif

public func sharedExamples(_ name: Swift.String, closure: @escaping () -> Swift.Void)
public func sharedExamples(_ name: Swift.String, closure: @escaping Quick.SharedExampleClosure)
public func describe(_ description: Swift.String, closure: () -> Swift.Void)
public func context(_ description: Swift.String, closure: () -> Swift.Void)

#if compiler(>=5.3) && $AsyncAwait
public func beforeEach(_ closure: @escaping Quick.BeforeExampleAsyncClosure)
#endif


#if compiler(>=5.3) && $AsyncAwait
public func beforeEach(_ closure: @escaping Quick.BeforeExampleWithMetadataAsyncClosure)
#endif


#if compiler(>=5.3) && $AsyncAwait
public func afterEach(_ closure: @escaping Quick.AfterExampleAsyncClosure)
#endif


#if compiler(>=5.3) && $AsyncAwait
public func afterEach(_ closure: @escaping Quick.AfterExampleWithMetadataAsyncClosure)
#endif


#if compiler(>=5.3) && $AsyncAwait
public func aroundEach(_ closure: @escaping Quick.AroundExampleAsyncClosure)
#endif


#if compiler(>=5.3) && $AsyncAwait
public func aroundEach(_ closure: @escaping Quick.AroundExampleWithMetadataAsyncClosure)
#endif


#if compiler(>=5.3) && $AsyncAwait
public func justBeforeEach(_ closure: @escaping Quick.BeforeExampleAsyncClosure)
#endif


#if compiler(>=5.3) && $AsyncAwait
public func it(_ description: Swift.String, file: Quick.FileString = #file, line: Swift.UInt = #line, closure: @escaping () async throws -> Swift.Void)
#endif

public func itBehavesLike(_ name: Swift.String, file: Quick.FileString = #file, line: Swift.UInt = #line)
public func itBehavesLike(_ name: Swift.String, file: Quick.FileString = #file, line: Swift.UInt = #line, sharedExampleContext: @escaping Quick.SharedExampleContext)
public func itBehavesLike<C>(_ behavior: Quick.Behavior<C>.Type, file: Quick.FileString = #file, line: Swift.UInt = #line, context: @escaping () -> C)

#if compiler(>=5.3) && $AsyncAwait
public func pending(_ description: Swift.String, closure: () async throws -> Swift.Void)
#endif

public func xdescribe(_ description: Swift.String, closure: () -> Swift.Void)
public func xcontext(_ description: Swift.String, closure: () -> Swift.Void)

#if compiler(>=5.3) && $AsyncAwait
public func xit(_ description: Swift.String, file: Quick.FileString = #file, line: Swift.UInt = #line, closure: @escaping () async throws -> Swift.Void)
#endif

public func xitBehavesLike<C>(_ behavior: Quick.Behavior<C>.Type, file: Quick.FileString = #file, line: Swift.UInt = #line, context: @escaping () -> C)
public func fdescribe(_ description: Swift.String, closure: () -> Swift.Void)
public func fcontext(_ description: Swift.String, closure: () -> Swift.Void)

#if compiler(>=5.3) && $AsyncAwait
public func fit(_ description: Swift.String, file: Quick.FileString = #file, line: Swift.UInt = #line, closure: @escaping () async throws -> Swift.Void)
#endif

public func fitBehavesLike(_ name: Swift.String, file: Quick.FileString = #file, line: Swift.UInt = #line)
public func fitBehavesLike(_ name: Swift.String, file: Quick.FileString = #file, line: Swift.UInt = #line, sharedExampleContext: @escaping Quick.SharedExampleContext)
public func fitBehavesLike<C>(_ behavior: Quick.Behavior<C>.Type, file: Quick.FileString = #file, line: Swift.UInt = #line, context: @escaping () -> C)
@propertyWrapper public struct TestState<T> {
  public var wrappedValue: T! {
    get
    set
  }
  public init()
  public init(_ initialValue: @autoclosure @escaping () -> T)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class _ExampleBase : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class Example : Quick._ExampleBase {
  @objc public var isSharedExample: Swift.Bool
  @objc public var callsite: Quick.Callsite
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public var name: Swift.String {
    @objc get
  }
  
  #if compiler(>=5.3) && $AsyncAwait
  @objc public func run() async
  #endif

  @objc deinit
}
extension Quick.Example {
  @nonobjc public static func == (lhs: Quick.Example, rhs: Quick.Example) -> Swift.Bool
}
